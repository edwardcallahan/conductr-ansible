---
- name: Copy ConductR
  synchronize: src=conductr/files/{{ CONDUCTR_PKG }} dest={{ CONDUCTR_CORE_WORK_DIR }}

- name: Install ConductR
  apt: deb={{ CONDUCTR_CORE_WORK_DIR }}/{{ CONDUCTR_PKG }}

- command: rm {{ CONDUCTR_CORE_WORK_DIR }}/{{ CONDUCTR_PKG }}

- name: Setup Python3 Pip
  apt: name={{ item }} state=latest
  with_items:
    - python3-pip

- name: Setup for CLI
  apt: name={{ item }} state=latest
  with_items:
    - python-dev
    - python-setuptools

- shell: "hostname -i"
  register: host_ip

- name: Create folder for properties
  file: path="/home/{{ REMOTE_USER }}/.lightbend" state=directory

- name: Copy commercial.properties
  synchronize: src="conductr/files/{{ COMMERCIAL_CREDENTIALS }}" dest="/home/{{ REMOTE_USER }}/.lightbend/commercial.credentials"

- file: path="/home/{{ REMOTE_USER }}/.lightbend" owner="{{ REMOTE_USER }}" recurse=yes

- name: Install ConductR CLI
  command: pip3 install -U conductr-cli requests
  become: yes
  become_method: sudo

- shell: 'echo -Dconductr.resource-provider.match-offer-roles=on | sudo tee -a /usr/share/conductr/conf/conductr.ini'
  become: yes
  become_method: sudo
  when: "{{ ENABLE_ROLES }} == true"

- shell: 'echo -Dconductr.ip=$(hostname -i) | sudo tee -a /usr/share/conductr/conf/conductr.ini'
  become: yes
  become_method: sudo

- shell: 'echo --seed {{ groups.seeds_private[0] }}:9004 | sudo tee -a /usr/share/conductr/conf/conductr.ini'
  become: yes
  become_method: sudo

- shell: 'echo -Dakka.loglevel=debug | sudo tee -a /usr/share/conductr/conf/conductr.ini'
  become: yes
  become_method: sudo
  when: "{{ ENABLE_DEBUG }} == true"

- shell: 'echo export CONDUCTR_IP=$(hostname -i) | sudo tee -a /etc/profile'
  become: yes
  become_method: sudo

- shell: "echo '$ModLoad imtcp' | sudo tee -a /etc/rsyslog.d/conductr.conf"
  become: yes
  become_method: sudo

- shell: "echo '$InputTCPServerRun 514' | sudo tee -a /etc/rsyslog.d/conductr.conf"
  become: yes
  become_method: sudo

# Sorry handlers, gotta do these now for ELB
- service: name=conductr state=restarted
- service: name=rsyslog state=restarted

- wait_for: host={{ host_ip.stdout }}
            port=9005
            state=started
